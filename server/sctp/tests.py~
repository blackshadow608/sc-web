from client import *
from urllib2 import urlopen
import json
import sys


class Convert:
    tezt = SctpClient()
    servise_name = ''
    data = ''

    def get_or_create_sc_node(self, sc_type, sc_idtf, client_instace):
        sc_node = client_instace.find_element_by_system_identifier(sc_idtf)
        if not sc_node:
            sc_node = client_instace.create_node(sc_type)
            client_instace.set_system_identifier(sc_node, sc_idtf)
        return sc_node

    def create_multirelation(self, current_sc_addr, value):
	node = self.tezt.create_node(ScElementType.sc_type_node | ScElementType.sc_type_const)
	self.tezt.create_arc(ScElementType.sc_type_arc_pos_const_perm, current_sc_addr, node)
        for child_value in value:
            if isinstance(child_value, dict):
                self.create_graph_from_json(child_value, node)
            elif isinstance(child_value, list):
                self.create_multirelation(node, child_value)
            else:
                value_node_sc_addr = self.tezt.create_node(ScElementType.sc_type_node | ScElementType.sc_type_const)
                self.tezt.set_system_identifier(value_node_sc_addr, str(child_value))
		self.tezt.create_arc(ScElementType.sc_type_arc_pos_const_perm,
                                     node,
                                     value_node_sc_addr)

    def create_graph_from_json(self, kwargs, sc_addr):
        for key, value in kwargs.iteritems():
            current_sc_addr = self.tezt.create_node(
                ScElementType.sc_type_node | ScElementType.sc_type_const)
            self.tezt.set_system_identifier(current_sc_addr, str(key) + '-' + self.servise_name)
	    self.tezt.create_arc(ScElementType.sc_type_arc_pos_const_perm, sc_addr, current_sc_addr)

            if isinstance(value, dict):
                self.create_graph_from_json(value, current_sc_addr)
            elif isinstance(value, list):
                self.create_multirelation(current_sc_addr, value)
            else:
                if isinstance(value, unicode):
                    value = value.encode('utf-8')
                value_node_sc_addr = self.tezt.create_node(ScElementType.sc_type_node | ScElementType.sc_type_const)
                self.tezt.set_system_identifier(value_node_sc_addr, str(value))
                self.tezt.create_arc(ScElementType.sc_type_arc_pos_const_perm, current_sc_addr, value_node_sc_addr)
                self.tezt.create_arc(ScElementType.sc_type_arc_pos_const_perm, sc_addr, value_node_sc_addr)

    def c(self, service_name, data):
        print service_name
        service_name = str(service_name)
        self.servise_name = service_name
        self.data = data
        self.tezt.initialize('127.0.0.1', 55770)
        aseet = json.loads(data)
        print aseet
        user = self.get_or_create_sc_node(
            ScElementType.sc_type_node | ScElementType.sc_type_node_norole | ScElementType.sc_type_const, 'user',
            self.tezt)
        self.tezt.set_system_identifier(
            self.tezt.create_node(
                ScElementType.sc_type_node | ScElementType.sc_type_node_norole | ScElementType.sc_type_const),
            service_name + " profile*")

        node = self.tezt.create_node(ScElementType.sc_type_node | ScElementType.sc_type_const)
        self.tezt.set_system_identifier(node, service_name + " profile current user")

        root_sc_addr = user

        relation_node = self.tezt.find_element_by_system_identifier(service_name + " profile*")
        relation_edge = self.tezt.create_arc(ScElementType.sc_type_arc_pos_const_perm, relation_node,
                                             self.tezt.create_arc(
                                                 ScElementType.sc_type_const | ScElementType.sc_type_edge_common,
                                                 root_sc_addr, node))
        self.create_graph_from_json(aseet, node)

        self.tezt.shutdown()
